        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Programs:2
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Constructor sets an empty board and specifies it is X's turn first
        2:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
        2:   10:  turn = X;
        8:   11:  for(int i=0; i<BOARDSIZE; i++)
       24:   12:    for(int j=0; j<BOARDSIZE; j++)
       18:   13:      board[i][j] = Blank;
        2:   14:}
        -:   15:
        -:   16:/**
        -:   17: * Switches turn member variable to represent whether it's X's or O's turn
        -:   18: * and returns whose turn it is
        -:   19:**/
        1:   20:Piece TicTacToeBoard::toggleTurn()
        -:   21:{
        1:   22:  if(turn == 'O')
    #####:   23:    return (Piece)'X';
        1:   24:  else if(turn == 'X')
        1:   25:    return (Piece)'O';
    #####:   26:}
        -:   27:
        -:   28:/**
        -:   29: * Places the piece of the current turn on the board, returns what
        -:   30: * piece is placed, and toggles which Piece's turn it is. placePiece does
        -:   31: * NOT allow to place a piece in a location where there is already a piece.
        -:   32: * In that case, placePiece just returns what is already at that location.
        -:   33: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   34: * is over, no more pieces can be placed so attempting to place a piece
        -:   35: * should neither change the board nor change whose turn it is.
        -:   36:**/
        2:   37:Piece TicTacToeBoard::placePiece(int row, int column) {
        2:   38:  if(row < BOARDSIZE && row > -1) {
        1:   39:    if(column < BOARDSIZE && column > -1) {
        1:   40:      if(board[row][column] == Blank) {
        1:   41:        board[row][column] = turn;
        1:   42:        turn = toggleTurn();
        1:   43:        return turn;
        -:   44:      }
        -:   45:      else {
    #####:   46:        return board[row][column];
        -:   47:      }
        -:   48:    }
        -:   49:  }
        1:   50:  return Invalid;
        -:   51:}
        -:   52:
        -:   53:/**
        -:   54: * Returns what piece is at the provided coordinates, or Blank if there
        -:   55: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   56:**/
    #####:   57:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   58:{
    #####:   59:  return Invalid;
        -:   60:}
        -:   61:
        -:   62:/**
        -:   63: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   64: * is not over, or Blank if the board is filled and no one has won.
        -:   65:**/
    #####:   66:Piece TicTacToeBoard::getWinner()
        -:   67:{
    #####:   68:  return Invalid;
        -:   69:}
